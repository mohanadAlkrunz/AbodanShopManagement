/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Trial.Customer;


import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.Bill;
import model.PurchasedProduct;

/**
 *
 * @author DELL
 */
public class AccountPaymentDetailsActivity extends javax.swing.JFrame {
        int bill_ID;
     Object[] columns = {"التاريخ", "الإجمالي", "الكمية", "سعرالوحدة", "اسم الصنف", "م.ف", "م"};
     private List<PurchasedProduct> products=new ArrayList<>();
     int customerId=7;
     String mCustomerName;
     double mTotal;
    /**
     * Creates new form AccountPaymentDetailsActivity
     */
    public AccountPaymentDetailsActivity(int customerId,String mCustomerName,double total) {
        initComponents();
        this.customerId=customerId;
        this.mCustomerName=mCustomerName;
        customerName.setText(mCustomerName);
        this.mTotal=total;
        totalBalance.setText(total+"");
         UIManager.put("OptionPane.messageFont", new FontUIResource(new Font(
                "Arial", Font.BOLD, 18)));
     Font font = new Font("Arial", Font.PLAIN, 18);
        jTable2.setFont(font);
        jTable2.getTableHeader().setFont(font);
 DefaultTableCellRenderer renderer=(DefaultTableCellRenderer)  jTable2.getTableHeader().getDefaultRenderer();
      renderer.setHorizontalAlignment(JLabel.CENTER);

      getData();

         jTable2.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {

                int index = jTable2.getSelectedRow();

                TableModel model = jTable2.getModel();

                String value1 = model.getValueAt(index, 6).toString();
                System.out.println(value1);
//                new BillActivity(Integer.parseInt(value1), customerID, false).setVisible(true);
//                setVisible(false);

            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        totalBalance = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        back = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        print = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        from = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        to = new javax.swing.JTextField();
        fillter = new javax.swing.JButton();
        all = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setLocation(new java.awt.Point(100, 100));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(250, 250, 250));
        jPanel1.setLayout(null);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 11, 106));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("السجل");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(650, 80, 200, 100);

        jPanel2.setBackground(new java.awt.Color(0, 11, 106));
        jPanel2.setLayout(null);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("محلات أبودان للأدوات الكهربائية");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(40, 20, 260, 29);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-conflict-48.png"))); // NOI18N
        jPanel2.add(jLabel5);
        jLabel5.setBounds(120, 50, 50, 50);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(-10, 0, 930, 130);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("إجمالي الحساب :");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(340, 630, 140, 29);

        totalBalance.setEditable(false);
        totalBalance.setBackground(new java.awt.Color(255, 0, 0));
        totalBalance.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        totalBalance.setForeground(new java.awt.Color(255, 255, 255));
        totalBalance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalBalance.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        jPanel1.add(totalBalance);
        totalBalance.setBounds(190, 620, 140, 40);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, "", null,  new Integer(1)},
                {null, null, null, "", null,  new Integer(2)},
                {null, null, null, "", null,  new Integer(3)},
                {null, null, null, "", null,  new Integer(4)}
            },
            new String [] {
                "الإجمالي", "الكمية", "سعر الوحدة", "اسم الصنف", "م.ز", "م"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setRowHeight(25);
        jScrollPane2.setViewportView(jTable2);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(190, 320, 670, 270);

        jPanel4.setBackground(new java.awt.Color(0, 11, 106));

        back.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        back.setText("رجوع");
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4);
        jPanel4.setBounds(30, 140, 110, 30);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("من :");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(810, 270, 40, 29);

        customerName.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        customerName.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        customerName.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        customerName.setEnabled(false);
        jPanel1.add(customerName);
        customerName.setBounds(490, 200, 250, 40);

        print.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        print.setText("طباعة");
        jPanel1.add(print);
        print.setBounds(39, 620, 90, 40);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("الاسم :");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(750, 210, 80, 29);

        from.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        from.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(from);
        from.setBounds(649, 272, 150, 30);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("إلى :");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(580, 270, 40, 29);

        to.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        to.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(to);
        to.setBounds(410, 270, 150, 30);

        fillter.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        fillter.setText("فلترة");
        fillter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillterActionPerformed(evt);
            }
        });
        jPanel1.add(fillter);
        fillter.setBounds(320, 270, 61, 30);

        all.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        all.setText("الكل");
        all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allActionPerformed(evt);
            }
        });
        jPanel1.add(all);
        all.setBounds(240, 270, 60, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked

        // TODO add your handling code here:
        ViewCustomersActivity customersActivity = new ViewCustomersActivity();
        customersActivity.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_backMouseClicked

    private void fillterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillterActionPerformed

        String startDate=from.getText();
        String endDate=to.getText();

        if(startDate.isEmpty() || endDate.isEmpty()){
            JOptionPane.showMessageDialog(null, "يجب ادخال تاريخ");
            return;
        }


            try {
                // TODO add your handling code here:
                getDataBetween( startDate, endDate);
            } catch (ParseException ex) {
                Logger.getLogger(AccountPaymentDetailsActivity.class.getName()).log(Level.SEVERE, null, ex);
            }

    }//GEN-LAST:event_fillterActionPerformed

    private void allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allActionPerformed
        // TODO add your handling code here:

        getData();
    }//GEN-LAST:event_allActionPerformed



    private void getDataBetween(String startDate,String endDate) throws ParseException{

        SimpleDateFormat start = new SimpleDateFormat("dd/MM/yyyy");
         Date sD=   start.parse(startDate);

        SimpleDateFormat end = new SimpleDateFormat("dd/MM/yyyy");
        Date eD=  end.parse(endDate);

           products.clear();

               try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            File f = new File("AboDan shops.accdb");
            String path = f.getAbsolutePath();
            //  now we can get the connection from the DriverManager
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://" + path, "", "");
            con.setAutoCommit(false);
            Statement s = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            s.execute("select ID,CUSTOMER_ID,CUSTOMER_NAME,TOTAL_AMOUNT,PAID,REMAIN,PURCHASE_DATE ,DISCOUNT,NOTE from PurchaseHistory");

            ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query

            if (rs != null) { // if rs == null, then there is no ResultSet to view

                while (rs.next())// this will step through our data row-by-row
                {

                    if (7 == rs.getInt("CUSTOMER_ID")) {
                            bill_ID=rs.getInt("ID");

            File f2 = new File("AboDan shops.accdb");
            String path1 = f2.getAbsolutePath();
            //  now we can get the connection from the DriverManager
            Connection con2 = DriverManager.getConnection("jdbc:ucanaccess://" + path, "", "");
            con2.setAutoCommit(false);
            Statement s1 = con2.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

                s1.execute("select ID,PURCHASE_ID,PRODUCT_NAME,PRICE,QUANTITY,TOTAL,PURCHASE_DATE from PurchaseProducts");

                ResultSet rs1 = s1.getResultSet(); // get any ResultSet that came from our query

                if (rs1 != null) {

                    while (rs1.next()) {

                        if (bill_ID == rs1.getInt("PURCHASE_ID")) {
                               SimpleDateFormat purchaseDate = new SimpleDateFormat("dd/MM/yyyy");
                                 Date pD=   purchaseDate.parse(rs1.getString("PURCHASE_DATE"));

                                 if(sD.compareTo(pD) <= 0 && eD.compareTo(pD) >= 0){


                            PurchasedProduct purchasedProduct = new PurchasedProduct();
                            purchasedProduct.setId(rs1.getInt("ID"));
                            purchasedProduct.setPURCHASE_ID(rs1.getInt("PURCHASE_ID"));
                            purchasedProduct.setName(rs1.getString("PRODUCT_NAME"));
                            purchasedProduct.setQuantity(rs1.getInt("QUANTITY"));
                            purchasedProduct.setTOTAL(rs1.getDouble("TOTAL"));
                            purchasedProduct.setSalePrice(rs1.getDouble("PRICE"));
                            purchasedProduct.setPurchaseDate(rs1.getString("PURCHASE_DATE"));

                            products.add(purchasedProduct);
                                 }
                        }

                    }

                }

                con2.commit();
                rs1.close();
                con2.close();
            }




                }
                displayData();
                con.commit();
                rs.close();
                con.close();
            }}
         catch (Exception e) {
            e.printStackTrace();
            // System.out.println("Error: " + e);
        }



    }

     private void displayData() {



        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(columns);
 Collections.reverse(products);
        Object[] row = new Object[9];
        for (int i = 0; i < products.size(); i++) {
            row[0] = products.get(i).getPurchaseDate();
            row[1] = products.get(i).getTOTAL();
            row[2] = products.get(i).getQuantity() + "";
            row[3] = products.get(i).getSalePrice()+ "";
            row[4] = products.get(i).getName() + "";
            row[5] = products.get(i).getPURCHASE_ID() + "";
            row[6] = products.get(i).getId();

            model.addRow(row);

        }

          jTable2.setModel(model);
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();

        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);

        jTable2.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(5).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(6).setCellRenderer(rightRenderer);

        jTable2.getColumnModel().getColumn(5).setMaxWidth(40);
        jTable2.getColumnModel().getColumn(5).setMinWidth(40);
        jTable2.getColumnModel().getColumn(6).setMaxWidth(40);
        jTable2.getColumnModel().getColumn(6).setMinWidth(40);

     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton all;
    private javax.swing.JLabel back;
    private javax.swing.JTextField customerName;
    private javax.swing.JButton fillter;
    private javax.swing.JTextField from;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton print;
    private javax.swing.JTextField to;
    private javax.swing.JTextField totalBalance;
    // End of variables declaration//GEN-END:variables

    private void getData() {

            products.clear();

               try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            File f = new File("AboDan shops.accdb");
            String path = f.getAbsolutePath();
            //  now we can get the connection from the DriverManager
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://" + path, "", "");
            con.setAutoCommit(false);
            Statement s = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            s.execute("select ID,CUSTOMER_ID,CUSTOMER_NAME,TOTAL_AMOUNT,PAID,REMAIN,PURCHASE_DATE ,DISCOUNT,NOTE from PurchaseHistory");

            ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query

            if (rs != null) { // if rs == null, then there is no ResultSet to view

                while (rs.next())// this will step through our data row-by-row
                {

                    if (7 == rs.getInt("CUSTOMER_ID")) {
                            bill_ID=rs.getInt("ID");

            File f2 = new File("AboDan shops.accdb");
            String path1 = f2.getAbsolutePath();
            //  now we can get the connection from the DriverManager
            Connection con2 = DriverManager.getConnection("jdbc:ucanaccess://" + path, "", "");
            con2.setAutoCommit(false);
            Statement s1 = con2.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

                s1.execute("select ID,PURCHASE_ID,PRODUCT_NAME,PRICE,QUANTITY,TOTAL,PURCHASE_DATE from PurchaseProducts");

                ResultSet rs1 = s1.getResultSet(); // get any ResultSet that came from our query

                if (rs1 != null) {

                    while (rs1.next()) {

                        if (bill_ID == rs1.getInt("PURCHASE_ID")) {

                            PurchasedProduct purchasedProduct = new PurchasedProduct();
                            purchasedProduct.setId(rs1.getInt("ID"));
                            purchasedProduct.setPURCHASE_ID(rs1.getInt("PURCHASE_ID"));
                            purchasedProduct.setName(rs1.getString("PRODUCT_NAME"));
                            purchasedProduct.setQuantity(rs1.getInt("QUANTITY"));
                            purchasedProduct.setTOTAL(rs1.getDouble("TOTAL"));
                            purchasedProduct.setSalePrice(rs1.getDouble("PRICE"));
                            purchasedProduct.setPurchaseDate(rs1.getString("PURCHASE_DATE"));

                            products.add(purchasedProduct);

                        }

                    }

                }

                con2.commit();
                rs1.close();
                con2.close();
            }




                }
                displayData();
                con.commit();
                rs.close();
                con.close();
            }}
         catch (Exception e) {
            e.printStackTrace();
            // System.out.println("Error: " + e);
        }


    }
}
