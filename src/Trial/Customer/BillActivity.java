/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Trial.Customer;

import Main.MainActivity;
import Trial.Companies.ViewPurchaseHistoryCompanyActivity;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.Bill;
import model.PurchasedProduct;

/**
 *
 * @author DELL
 */
public class BillActivity extends javax.swing.JFrame {

    Object[] columns = {"الإجمالي", "الكمية", "سعر الوحدة", "اسم الصنف", "م.ف", "م"};
    static List<PurchasedProduct> productsList = new ArrayList<>();
    static int bill_ID;
    int customerID;
    private int id;
    private boolean mIsCompany;
    private String note;

    public BillActivity(int bill_ID, int id, boolean isCompany,String note) {
        initComponents();
UIManager.put("OptionPane.messageFont", new FontUIResource(new Font(
                "Arial", Font.BOLD, 18)));
        this.bill_ID = bill_ID;
        this.mIsCompany = isCompany;
        this.id = id;
        this.note=note;
        System.out.println("bill id >>> " + BillActivity.bill_ID);
        Font font = new Font("Arial", Font.PLAIN, 18);
        jTable2.setFont(font);
        jTable2.getTableHeader().setFont(font);

        if(isCompany)
            addReturned.setVisible(false);


        if(note.equalsIgnoreCase("مرجع")){
                getReturnedItems();
        }else{
            getData();
        }

 DefaultTableCellRenderer renderer=(DefaultTableCellRenderer)  jTable2.getTableHeader().getDefaultRenderer();
      renderer.setHorizontalAlignment(JLabel.CENTER);
        jTable2.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {

                int index = jTable2.getSelectedRow();

                TableModel model = jTable2.getModel();

                String value1 = model.getValueAt(index, 5).toString();
                JOptionPane.showMessageDialog(rootPane, value1 + " MOHANAD");

            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        remain = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        back = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        totalBalance = new javax.swing.JTextField();
        paid = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        discountTotal = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        addReturned = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("الفاتورة");
        setLocation(new java.awt.Point(100, 100));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(250, 250, 250));
        jPanel1.setLayout(null);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 11, 106));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("الفاتورة");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(710, 80, 190, 100);

        jPanel2.setBackground(new java.awt.Color(0, 11, 106));
        jPanel2.setLayout(null);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("محلات أبودان للأدوات الكهربائية");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(40, 20, 260, 29);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-conflict-48.png"))); // NOI18N
        jPanel2.add(jLabel5);
        jLabel5.setBounds(120, 50, 50, 50);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(-10, 0, 950, 130);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("المتبقي :");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(470, 200, 90, 29);

        remain.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        remain.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        remain.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        remain.setEnabled(false);
        jPanel1.add(remain);
        remain.setBounds(340, 200, 140, 40);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Double(50.0),  new Integer(10),  new Double(5.0), "مفتاح مجوز", null,  new Integer(1)},
                { new Double(99.0),  new Integer(33),  new Double(3.0), "سلك مبندل", null,  new Integer(2)},
                { new Double(120.0),  new Integer(1),  new Double(120.0), "نجفة", null,  new Integer(3)}
            },
            new String [] {
                "الإجمالي", "الكمية", "سعر الوحدة", "اسم الصنف", "م.ف", "م"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setRowHeight(25);
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(4).setMinWidth(35);
            jTable2.getColumnModel().getColumn(4).setMaxWidth(35);
            jTable2.getColumnModel().getColumn(5).setMinWidth(25);
            jTable2.getColumnModel().getColumn(5).setMaxWidth(25);
        }

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(140, 250, 780, 270);

        jPanel4.setBackground(new java.awt.Color(0, 11, 106));

        back.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        back.setText("رجوع");
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4);
        jPanel4.setBounds(30, 140, 110, 30);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("الاسم :");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(810, 200, 80, 29);

        customerName.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        customerName.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        customerName.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        customerName.setEnabled(false);
        jPanel1.add(customerName);
        customerName.setBounds(570, 200, 250, 40);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("إجمالي الفاتورة :");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(770, 550, 140, 29);

        totalBalance.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        totalBalance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalBalance.setText("0");
        totalBalance.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        totalBalance.setEnabled(false);
        jPanel1.add(totalBalance);
        totalBalance.setBounds(630, 540, 140, 40);

        paid.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        paid.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        paid.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        paid.setEnabled(false);
        jPanel1.add(paid);
        paid.setBounds(350, 540, 140, 40);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("المبلغ المدفوع :");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(480, 550, 140, 29);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("الخصم:");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(250, 550, 60, 29);

        discountTotal.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        discountTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        discountTotal.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        discountTotal.setEnabled(false);
        jPanel1.add(discountTotal);
        discountTotal.setBounds(160, 540, 90, 40);

        jPanel9.setBackground(new java.awt.Color(153, 153, 153));

        addReturned.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        addReturned.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addReturned.setText("إضافة مرجع");
        addReturned.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addReturnedMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addReturned, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addReturned, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(jPanel9);
        jPanel9.setBounds(30, 180, 110, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 940, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:

//        new MainActivity().setVisible(true);
        if (mIsCompany) {
            new ViewPurchaseHistoryCompanyActivity(customerName.getText(), id).setVisible(true);
            setVisible(false);
        } else {
            new ViewPurchaseHistoryActivity(customerName.getText(), id).setVisible(true);
            setVisible(false);
        }

//

    }//GEN-LAST:event_backMouseClicked

    private void addReturnedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addReturnedMouseClicked
        // TODO add your handling code here:
        new EditBillActivity(customerName.getText(),customerID).setVisible(true);
        setVisible(false);

    }//GEN-LAST:event_addReturnedMouseClicked


    private void getReturnedItems(){
            productsList.clear();

        try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            File f = new File("AboDan shops.accdb");
            String path = f.getAbsolutePath();
            //  now we can get the connection from the DriverManager
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://" + path, "", "");
            con.setAutoCommit(false);
            Statement s = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            if (mIsCompany) {

                s.execute("select ID,PURCHASE_ID,PRODUCT_NAME,ORIGINAL_PRICE,QUANTITY,TOTAL from PurchaseCompanyProducts");

                ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query

                if (rs != null) {

                    while (rs.next()) {

                        if (bill_ID == rs.getInt("PURCHASE_ID")) {

                            PurchasedProduct purchasedProduct = new PurchasedProduct();
                            purchasedProduct.setId(rs.getInt("ID"));
                            purchasedProduct.setPURCHASE_ID(rs.getInt("PURCHASE_ID"));
                            purchasedProduct.setName(rs.getString("PRODUCT_NAME"));
                            purchasedProduct.setQuantity(rs.getInt("QUANTITY"));
                            purchasedProduct.setTOTAL(rs.getDouble("TOTAL"));
                            purchasedProduct.setSalePrice(rs.getDouble("ORIGINAL_PRICE"));

                            productsList.add(purchasedProduct);
                            displayData();
                        }

                    }

                }

                con.commit();
                rs.close();
                con.close();
            } else {

                s.execute("select ID,PURCHASE_ID,PRODUCT_NAME,PRICE,QUANTITY,TOTAL from ReturndProducts");

                ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query

                if (rs != null) {

                    while (rs.next()) {

                        if (bill_ID == rs.getInt("PURCHASE_ID")) {

                            PurchasedProduct purchasedProduct = new PurchasedProduct();
                            purchasedProduct.setId(rs.getInt("ID"));
                            purchasedProduct.setPURCHASE_ID(rs.getInt("PURCHASE_ID"));
                            purchasedProduct.setName(rs.getString("PRODUCT_NAME"));
                            purchasedProduct.setQuantity(rs.getInt("QUANTITY"));
                            purchasedProduct.setTOTAL(rs.getDouble("TOTAL"));
                            purchasedProduct.setSalePrice(rs.getDouble("PRICE"));

                            productsList.add(purchasedProduct);
                            displayData();
                        }

                    }

                }

                con.commit();
                rs.close();
                con.close();
            }

            getBillInformations();
        } catch (Exception e) {
            e.printStackTrace();

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addReturned;
    private javax.swing.JLabel back;
    private javax.swing.JTextField customerName;
    private javax.swing.JTextField discountTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField paid;
    private javax.swing.JTextField remain;
    private javax.swing.JTextField totalBalance;
    // End of variables declaration//GEN-END:variables

    private void getBillInformations() {

        try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            File f = new File("AboDan shops.accdb");
            String path = f.getAbsolutePath();
            //  now we can get the connection from the DriverManager
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://" + path, "", "");
            con.setAutoCommit(false);
            Statement s = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            if (mIsCompany) {
                s.execute("select ID,COMPANY_ID,COMPANY_NAME,TOTAL_AMOUNT,PAID,REMAIN,PURCHASE_DATE,DISCOUNT from CompaniesPurchaseHistory");
                ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query

                if (rs != null) { // if rs == null, then there is no ResultSet to view

                    while (rs.next())// this will step through our data row-by-row
                    {

                        if (bill_ID == rs.getInt("ID")) {

                            customerName.setText(rs.getString("COMPANY_NAME"));
                            totalBalance.setText(rs.getDouble("TOTAL_AMOUNT") + "");
                            remain.setText(rs.getDouble("REMAIN") + "");
                            paid.setText(rs.getDouble("PAID") + "");
                            discountTotal.setText(rs.getDouble("DISCOUNT") + "");
                        }

                        displayData();

                    }

                }
                s.close();
                con.commit();
                con.close();
            } else {
                s.execute("select ID,CUSTOMER_ID,CUSTOMER_NAME,TOTAL_AMOUNT,PAID,REMAIN,PURCHASE_DATE,DISCOUNT from PurchaseHistory");
                ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query

                if (rs != null) { // if rs == null, then there is no ResultSet to view

                    while (rs.next())// this will step through our data row-by-row
                    {

                        if (bill_ID == rs.getInt("ID")) {
                             customerID=rs.getInt("CUSTOMER_ID");
                            customerName.setText(rs.getString("CUSTOMER_NAME"));
                            totalBalance.setText(rs.getDouble("TOTAL_AMOUNT") + "");
                            remain.setText(rs.getDouble("REMAIN") + "");
                            paid.setText(rs.getDouble("PAID") + "");
                            discountTotal.setText(rs.getDouble("DISCOUNT") + "");
                        }

                        displayData();

                    }

                }
                s.close();
                con.commit();
                con.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
            // System.out.println("Error: " + e);
        }

    }

    private void getData() {

        productsList.clear();

        try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            File f = new File("AboDan shops.accdb");
            String path = f.getAbsolutePath();
            //  now we can get the connection from the DriverManager
            Connection con = DriverManager.getConnection("jdbc:ucanaccess://" + path, "", "");
            con.setAutoCommit(false);
            Statement s = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

            if (mIsCompany) {

                s.execute("select ID,PURCHASE_ID,PRODUCT_NAME,ORIGINAL_PRICE,QUANTITY,TOTAL from PurchaseCompanyProducts");

                ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query

                if (rs != null) {

                    while (rs.next()) {

                        if (bill_ID == rs.getInt("PURCHASE_ID")) {

                            PurchasedProduct purchasedProduct = new PurchasedProduct();
                            purchasedProduct.setId(rs.getInt("ID"));
                            purchasedProduct.setPURCHASE_ID(rs.getInt("PURCHASE_ID"));
                            purchasedProduct.setName(rs.getString("PRODUCT_NAME"));
                            purchasedProduct.setQuantity(rs.getInt("QUANTITY"));
                            purchasedProduct.setTOTAL(rs.getDouble("TOTAL"));
                            purchasedProduct.setSalePrice(rs.getDouble("ORIGINAL_PRICE"));

                            productsList.add(purchasedProduct);
                            displayData();
                        }

                    }

                }

                con.commit();
                rs.close();
                con.close();
            } else {

                s.execute("select ID,PURCHASE_ID,PRODUCT_NAME,PRICE,QUANTITY,TOTAL from PurchaseProducts");

                ResultSet rs = s.getResultSet(); // get any ResultSet that came from our query

                if (rs != null) {

                    while (rs.next()) {

                        if (bill_ID == rs.getInt("PURCHASE_ID")) {

                            PurchasedProduct purchasedProduct = new PurchasedProduct();
                            purchasedProduct.setId(rs.getInt("ID"));
                            purchasedProduct.setPURCHASE_ID(rs.getInt("PURCHASE_ID"));
                            purchasedProduct.setName(rs.getString("PRODUCT_NAME"));
                            purchasedProduct.setQuantity(rs.getInt("QUANTITY"));
                            purchasedProduct.setTOTAL(rs.getDouble("TOTAL"));
                            purchasedProduct.setSalePrice(rs.getDouble("PRICE"));

                            productsList.add(purchasedProduct);
                            displayData();
                        }

                    }

                }

                con.commit();
                rs.close();
                con.close();
            }

            getBillInformations();
        } catch (Exception e) {
            e.printStackTrace();

        }

    }

    private void displayData() {

        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(columns);

        Object[] row = new Object[6];
        for (int i = 0; i < productsList.size(); i++) {

            row[0] = productsList.get(i).getTOTAL() + "";
            row[1] = productsList.get(i).getQuantity() + "";
            row[2] = productsList.get(i).getSalePrice() + "";
            row[3] = productsList.get(i).getName() + "";
            row[4] = productsList.get(i).getPURCHASE_ID() + "";
            row[5] = productsList.get(i).getId() + "";

            model.addRow(row);

        }

        jTable2.setModel(model);

        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        jTable2.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(5).setCellRenderer(rightRenderer);

        jTable2.getColumnModel().getColumn(4).setMinWidth(30);
        jTable2.getColumnModel().getColumn(4).setMaxWidth(30);
        jTable2.getColumnModel().getColumn(5).setMinWidth(30);
        jTable2.getColumnModel().getColumn(5).setMaxWidth(30);

    }
}
